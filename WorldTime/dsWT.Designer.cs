//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WorldTime {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dsWT")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsWT : System.Data.DataSet {
        
        private CountryDataTable tableCountry;
        
        private StateDataTable tableState;
        
        private ContinentDataTable tableContinent;
        
        private TimezoneDataTable tableTimezone;
        
        private CityDataTable tableCity;
        
        private System.Data.DataRelation relationFK_Continent_Country_Continent_ID;
        
        private System.Data.DataRelation relationFK_Country_State_Country_ID;
        
        private System.Data.DataRelation relationFK_Timezone_City_Timezone_ID;
        
        private System.Data.DataRelation relationFK_State_City_State_ID;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsWT() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsWT(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Country"] != null)) {
                    base.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["State"] != null)) {
                    base.Tables.Add(new StateDataTable(ds.Tables["State"]));
                }
                if ((ds.Tables["Continent"] != null)) {
                    base.Tables.Add(new ContinentDataTable(ds.Tables["Continent"]));
                }
                if ((ds.Tables["Timezone"] != null)) {
                    base.Tables.Add(new TimezoneDataTable(ds.Tables["Timezone"]));
                }
                if ((ds.Tables["City"] != null)) {
                    base.Tables.Add(new CityDataTable(ds.Tables["City"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CountryDataTable Country {
            get {
                return this.tableCountry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StateDataTable State {
            get {
                return this.tableState;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContinentDataTable Continent {
            get {
                return this.tableContinent;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimezoneDataTable Timezone {
            get {
                return this.tableTimezone;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CityDataTable City {
            get {
                return this.tableCity;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dsWT cln = ((dsWT)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Country"] != null)) {
                    base.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["State"] != null)) {
                    base.Tables.Add(new StateDataTable(ds.Tables["State"]));
                }
                if ((ds.Tables["Continent"] != null)) {
                    base.Tables.Add(new ContinentDataTable(ds.Tables["Continent"]));
                }
                if ((ds.Tables["Timezone"] != null)) {
                    base.Tables.Add(new TimezoneDataTable(ds.Tables["Timezone"]));
                }
                if ((ds.Tables["City"] != null)) {
                    base.Tables.Add(new CityDataTable(ds.Tables["City"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCountry = ((CountryDataTable)(base.Tables["Country"]));
            if ((initTable == true)) {
                if ((this.tableCountry != null)) {
                    this.tableCountry.InitVars();
                }
            }
            this.tableState = ((StateDataTable)(base.Tables["State"]));
            if ((initTable == true)) {
                if ((this.tableState != null)) {
                    this.tableState.InitVars();
                }
            }
            this.tableContinent = ((ContinentDataTable)(base.Tables["Continent"]));
            if ((initTable == true)) {
                if ((this.tableContinent != null)) {
                    this.tableContinent.InitVars();
                }
            }
            this.tableTimezone = ((TimezoneDataTable)(base.Tables["Timezone"]));
            if ((initTable == true)) {
                if ((this.tableTimezone != null)) {
                    this.tableTimezone.InitVars();
                }
            }
            this.tableCity = ((CityDataTable)(base.Tables["City"]));
            if ((initTable == true)) {
                if ((this.tableCity != null)) {
                    this.tableCity.InitVars();
                }
            }
            this.relationFK_Continent_Country_Continent_ID = this.Relations["FK_Continent_Country_Continent_ID"];
            this.relationFK_Country_State_Country_ID = this.Relations["FK_Country_State_Country_ID"];
            this.relationFK_Timezone_City_Timezone_ID = this.Relations["FK_Timezone_City_Timezone_ID"];
            this.relationFK_State_City_State_ID = this.Relations["FK_State_City_State_ID"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsWT";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsWT.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCountry = new CountryDataTable();
            base.Tables.Add(this.tableCountry);
            this.tableState = new StateDataTable();
            base.Tables.Add(this.tableState);
            this.tableContinent = new ContinentDataTable();
            base.Tables.Add(this.tableContinent);
            this.tableTimezone = new TimezoneDataTable();
            base.Tables.Add(this.tableTimezone);
            this.tableCity = new CityDataTable();
            base.Tables.Add(this.tableCity);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_Continent_Country_Continent_ID", new System.Data.DataColumn[] {
                        this.tableContinent.Continent_IDColumn}, new System.Data.DataColumn[] {
                        this.tableCountry.Continent_IDColumn});
            this.tableCountry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Country_State_Country_ID", new System.Data.DataColumn[] {
                        this.tableCountry.Country_IDColumn}, new System.Data.DataColumn[] {
                        this.tableState.Country_IDColumn});
            this.tableState.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Timezone_City_Timezone_ID", new System.Data.DataColumn[] {
                        this.tableTimezone.Timezone_IDColumn}, new System.Data.DataColumn[] {
                        this.tableCity.Timezone_IDColumn});
            this.tableCity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_State_City_State_ID", new System.Data.DataColumn[] {
                        this.tableState.State_IDColumn}, new System.Data.DataColumn[] {
                        this.tableCity.State_IDColumn});
            this.tableCity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_Continent_Country_Continent_ID = new System.Data.DataRelation("FK_Continent_Country_Continent_ID", new System.Data.DataColumn[] {
                        this.tableContinent.Continent_IDColumn}, new System.Data.DataColumn[] {
                        this.tableCountry.Continent_IDColumn}, false);
            this.Relations.Add(this.relationFK_Continent_Country_Continent_ID);
            this.relationFK_Country_State_Country_ID = new System.Data.DataRelation("FK_Country_State_Country_ID", new System.Data.DataColumn[] {
                        this.tableCountry.Country_IDColumn}, new System.Data.DataColumn[] {
                        this.tableState.Country_IDColumn}, false);
            this.Relations.Add(this.relationFK_Country_State_Country_ID);
            this.relationFK_Timezone_City_Timezone_ID = new System.Data.DataRelation("FK_Timezone_City_Timezone_ID", new System.Data.DataColumn[] {
                        this.tableTimezone.Timezone_IDColumn}, new System.Data.DataColumn[] {
                        this.tableCity.Timezone_IDColumn}, false);
            this.Relations.Add(this.relationFK_Timezone_City_Timezone_ID);
            this.relationFK_State_City_State_ID = new System.Data.DataRelation("FK_State_City_State_ID", new System.Data.DataColumn[] {
                        this.tableState.State_IDColumn}, new System.Data.DataColumn[] {
                        this.tableCity.State_IDColumn}, false);
            this.Relations.Add(this.relationFK_State_City_State_ID);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCountry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeState() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContinent() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTimezone() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCity() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dsWT ds = new dsWT();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void CountryRowChangeEventHandler(object sender, CountryRowChangeEvent e);
        
        public delegate void StateRowChangeEventHandler(object sender, StateRowChangeEvent e);
        
        public delegate void ContinentRowChangeEventHandler(object sender, ContinentRowChangeEvent e);
        
        public delegate void TimezoneRowChangeEventHandler(object sender, TimezoneRowChangeEvent e);
        
        public delegate void CityRowChangeEventHandler(object sender, CityRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CountryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCountry_ID;
            
            private System.Data.DataColumn columnContinent_ID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnPhone_Code;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryDataTable() {
                this.TableName = "Country";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CountryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CountryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Country_IDColumn {
                get {
                    return this.columnCountry_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Continent_IDColumn {
                get {
                    return this.columnContinent_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Phone_CodeColumn {
                get {
                    return this.columnPhone_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow this[int index] {
                get {
                    return ((CountryRow)(this.Rows[index]));
                }
            }
            
            public event CountryRowChangeEventHandler CountryRowChanging;
            
            public event CountryRowChangeEventHandler CountryRowChanged;
            
            public event CountryRowChangeEventHandler CountryRowDeleting;
            
            public event CountryRowChangeEventHandler CountryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCountryRow(CountryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow AddCountryRow(ContinentRow parentContinentRowByFK_Continent_Country_Continent_ID, string Name, string Phone_Code) {
                CountryRow rowCountryRow = ((CountryRow)(this.NewRow()));
                rowCountryRow.ItemArray = new object[] {
                        null,
                        parentContinentRowByFK_Continent_Country_Continent_ID[0],
                        Name,
                        Phone_Code};
                this.Rows.Add(rowCountryRow);
                return rowCountryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow FindByCountry_ID(short Country_ID) {
                return ((CountryRow)(this.Rows.Find(new object[] {
                            Country_ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CountryDataTable cln = ((CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CountryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCountry_ID = base.Columns["Country_ID"];
                this.columnContinent_ID = base.Columns["Continent_ID"];
                this.columnName = base.Columns["Name"];
                this.columnPhone_Code = base.Columns["Phone_Code"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCountry_ID = new System.Data.DataColumn("Country_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry_ID);
                this.columnContinent_ID = new System.Data.DataColumn("Continent_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContinent_ID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPhone_Code = new System.Data.DataColumn("Phone_Code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone_Code);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Country", new System.Data.DataColumn[] {
                                this.columnCountry_ID}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnName}, false));
                this.columnCountry_ID.AutoIncrement = true;
                this.columnCountry_ID.AutoIncrementSeed = 1;
                this.columnCountry_ID.AllowDBNull = false;
                this.columnCountry_ID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow NewCountryRow() {
                return ((CountryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CountryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CountryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CountryRowChanged != null)) {
                    this.CountryRowChanged(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CountryRowChanging != null)) {
                    this.CountryRowChanging(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CountryRowDeleted != null)) {
                    this.CountryRowDeleted(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CountryRowDeleting != null)) {
                    this.CountryRowDeleting(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCountryRow(CountryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsWT ds = new dsWT();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CountryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnState_ID;
            
            private System.Data.DataColumn columnCountry_ID;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateDataTable() {
                this.TableName = "State";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn State_IDColumn {
                get {
                    return this.columnState_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Country_IDColumn {
                get {
                    return this.columnCountry_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow this[int index] {
                get {
                    return ((StateRow)(this.Rows[index]));
                }
            }
            
            public event StateRowChangeEventHandler StateRowChanging;
            
            public event StateRowChangeEventHandler StateRowChanged;
            
            public event StateRowChangeEventHandler StateRowDeleting;
            
            public event StateRowChangeEventHandler StateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStateRow(StateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow AddStateRow(CountryRow parentCountryRowByFK_Country_State_Country_ID, string Name) {
                StateRow rowStateRow = ((StateRow)(this.NewRow()));
                rowStateRow.ItemArray = new object[] {
                        null,
                        parentCountryRowByFK_Country_State_Country_ID[0],
                        Name};
                this.Rows.Add(rowStateRow);
                return rowStateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow FindByState_ID(short State_ID) {
                return ((StateRow)(this.Rows.Find(new object[] {
                            State_ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StateDataTable cln = ((StateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnState_ID = base.Columns["State_ID"];
                this.columnCountry_ID = base.Columns["Country_ID"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnState_ID = new System.Data.DataColumn("State_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnState_ID);
                this.columnCountry_ID = new System.Data.DataColumn("Country_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry_ID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_State", new System.Data.DataColumn[] {
                                this.columnState_ID}, true));
                this.columnState_ID.AutoIncrement = true;
                this.columnState_ID.AutoIncrementSeed = 2;
                this.columnState_ID.AllowDBNull = false;
                this.columnState_ID.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow NewStateRow() {
                return ((StateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StateRowChanged != null)) {
                    this.StateRowChanged(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StateRowChanging != null)) {
                    this.StateRowChanging(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StateRowDeleted != null)) {
                    this.StateRowDeleted(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StateRowDeleting != null)) {
                    this.StateRowDeleting(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStateRow(StateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsWT ds = new dsWT();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContinentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnContinent_ID;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentDataTable() {
                this.TableName = "Continent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContinentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContinentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Continent_IDColumn {
                get {
                    return this.columnContinent_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentRow this[int index] {
                get {
                    return ((ContinentRow)(this.Rows[index]));
                }
            }
            
            public event ContinentRowChangeEventHandler ContinentRowChanging;
            
            public event ContinentRowChangeEventHandler ContinentRowChanged;
            
            public event ContinentRowChangeEventHandler ContinentRowDeleting;
            
            public event ContinentRowChangeEventHandler ContinentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContinentRow(ContinentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentRow AddContinentRow(short Continent_ID, string Name) {
                ContinentRow rowContinentRow = ((ContinentRow)(this.NewRow()));
                rowContinentRow.ItemArray = new object[] {
                        Continent_ID,
                        Name};
                this.Rows.Add(rowContinentRow);
                return rowContinentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentRow FindByContinent_ID(short Continent_ID) {
                return ((ContinentRow)(this.Rows.Find(new object[] {
                            Continent_ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ContinentDataTable cln = ((ContinentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ContinentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContinent_ID = base.Columns["Continent_ID"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContinent_ID = new System.Data.DataColumn("Continent_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContinent_ID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Continent", new System.Data.DataColumn[] {
                                this.columnContinent_ID}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnName}, false));
                this.columnContinent_ID.AutoIncrementSeed = 1;
                this.columnContinent_ID.AllowDBNull = false;
                this.columnContinent_ID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentRow NewContinentRow() {
                return ((ContinentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ContinentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ContinentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContinentRowChanged != null)) {
                    this.ContinentRowChanged(this, new ContinentRowChangeEvent(((ContinentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContinentRowChanging != null)) {
                    this.ContinentRowChanging(this, new ContinentRowChangeEvent(((ContinentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContinentRowDeleted != null)) {
                    this.ContinentRowDeleted(this, new ContinentRowChangeEvent(((ContinentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContinentRowDeleting != null)) {
                    this.ContinentRowDeleting(this, new ContinentRowChangeEvent(((ContinentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContinentRow(ContinentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsWT ds = new dsWT();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContinentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TimezoneDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimezone_ID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnOffset;
            
            private System.Data.DataColumn columnHasDST;
            
            private System.Data.DataColumn columnDST_Start;
            
            private System.Data.DataColumn columnDST_End;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimezoneDataTable() {
                this.TableName = "Timezone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimezoneDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TimezoneDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Timezone_IDColumn {
                get {
                    return this.columnTimezone_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OffsetColumn {
                get {
                    return this.columnOffset;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasDSTColumn {
                get {
                    return this.columnHasDST;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DST_StartColumn {
                get {
                    return this.columnDST_Start;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DST_EndColumn {
                get {
                    return this.columnDST_End;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimezoneRow this[int index] {
                get {
                    return ((TimezoneRow)(this.Rows[index]));
                }
            }
            
            public event TimezoneRowChangeEventHandler TimezoneRowChanging;
            
            public event TimezoneRowChangeEventHandler TimezoneRowChanged;
            
            public event TimezoneRowChangeEventHandler TimezoneRowDeleting;
            
            public event TimezoneRowChangeEventHandler TimezoneRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTimezoneRow(TimezoneRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimezoneRow AddTimezoneRow(string Name, string Offset, bool HasDST, string DST_Start, string DST_End) {
                TimezoneRow rowTimezoneRow = ((TimezoneRow)(this.NewRow()));
                rowTimezoneRow.ItemArray = new object[] {
                        null,
                        Name,
                        Offset,
                        HasDST,
                        DST_Start,
                        DST_End};
                this.Rows.Add(rowTimezoneRow);
                return rowTimezoneRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimezoneRow FindByTimezone_ID(short Timezone_ID) {
                return ((TimezoneRow)(this.Rows.Find(new object[] {
                            Timezone_ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TimezoneDataTable cln = ((TimezoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TimezoneDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimezone_ID = base.Columns["Timezone_ID"];
                this.columnName = base.Columns["Name"];
                this.columnOffset = base.Columns["Offset"];
                this.columnHasDST = base.Columns["HasDST"];
                this.columnDST_Start = base.Columns["DST_Start"];
                this.columnDST_End = base.Columns["DST_End"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimezone_ID = new System.Data.DataColumn("Timezone_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimezone_ID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnOffset = new System.Data.DataColumn("Offset", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset);
                this.columnHasDST = new System.Data.DataColumn("HasDST", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasDST);
                this.columnDST_Start = new System.Data.DataColumn("DST_Start", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDST_Start);
                this.columnDST_End = new System.Data.DataColumn("DST_End", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDST_End);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Timezone", new System.Data.DataColumn[] {
                                this.columnTimezone_ID}, true));
                this.columnTimezone_ID.AutoIncrement = true;
                this.columnTimezone_ID.AutoIncrementSeed = 1;
                this.columnTimezone_ID.AllowDBNull = false;
                this.columnTimezone_ID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnOffset.AllowDBNull = false;
                this.columnHasDST.AllowDBNull = false;
                this.columnDST_Start.AllowDBNull = false;
                this.columnDST_End.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimezoneRow NewTimezoneRow() {
                return ((TimezoneRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TimezoneRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TimezoneRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimezoneRowChanged != null)) {
                    this.TimezoneRowChanged(this, new TimezoneRowChangeEvent(((TimezoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimezoneRowChanging != null)) {
                    this.TimezoneRowChanging(this, new TimezoneRowChangeEvent(((TimezoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimezoneRowDeleted != null)) {
                    this.TimezoneRowDeleted(this, new TimezoneRowChangeEvent(((TimezoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimezoneRowDeleting != null)) {
                    this.TimezoneRowDeleting(this, new TimezoneRowChangeEvent(((TimezoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTimezoneRow(TimezoneRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsWT ds = new dsWT();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TimezoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCity_ID;
            
            private System.Data.DataColumn columnState_ID;
            
            private System.Data.DataColumn columnTimezone_ID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIs_Country_Capital;
            
            private System.Data.DataColumn columnPhone_Code;
            
            private System.Data.DataColumn columnWeather_Code;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityDataTable() {
                this.TableName = "City";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn City_IDColumn {
                get {
                    return this.columnCity_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn State_IDColumn {
                get {
                    return this.columnState_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Timezone_IDColumn {
                get {
                    return this.columnTimezone_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Is_Country_CapitalColumn {
                get {
                    return this.columnIs_Country_Capital;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Phone_CodeColumn {
                get {
                    return this.columnPhone_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Weather_CodeColumn {
                get {
                    return this.columnWeather_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow this[int index] {
                get {
                    return ((CityRow)(this.Rows[index]));
                }
            }
            
            public event CityRowChangeEventHandler CityRowChanging;
            
            public event CityRowChangeEventHandler CityRowChanged;
            
            public event CityRowChangeEventHandler CityRowDeleting;
            
            public event CityRowChangeEventHandler CityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCityRow(CityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow AddCityRow(StateRow parentStateRowByFK_State_City_State_ID, TimezoneRow parentTimezoneRowByFK_Timezone_City_Timezone_ID, string Name, bool Is_Country_Capital, string Phone_Code, string Weather_Code) {
                CityRow rowCityRow = ((CityRow)(this.NewRow()));
                rowCityRow.ItemArray = new object[] {
                        null,
                        parentStateRowByFK_State_City_State_ID[0],
                        parentTimezoneRowByFK_Timezone_City_Timezone_ID[0],
                        Name,
                        Is_Country_Capital,
                        Phone_Code,
                        Weather_Code};
                this.Rows.Add(rowCityRow);
                return rowCityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow FindByCity_ID(short City_ID) {
                return ((CityRow)(this.Rows.Find(new object[] {
                            City_ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CityDataTable cln = ((CityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCity_ID = base.Columns["City_ID"];
                this.columnState_ID = base.Columns["State_ID"];
                this.columnTimezone_ID = base.Columns["Timezone_ID"];
                this.columnName = base.Columns["Name"];
                this.columnIs_Country_Capital = base.Columns["Is_Country_Capital"];
                this.columnPhone_Code = base.Columns["Phone_Code"];
                this.columnWeather_Code = base.Columns["Weather_Code"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCity_ID = new System.Data.DataColumn("City_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity_ID);
                this.columnState_ID = new System.Data.DataColumn("State_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnState_ID);
                this.columnTimezone_ID = new System.Data.DataColumn("Timezone_ID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimezone_ID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIs_Country_Capital = new System.Data.DataColumn("Is_Country_Capital", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Country_Capital);
                this.columnPhone_Code = new System.Data.DataColumn("Phone_Code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone_Code);
                this.columnWeather_Code = new System.Data.DataColumn("Weather_Code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeather_Code);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_City", new System.Data.DataColumn[] {
                                this.columnCity_ID}, true));
                this.columnCity_ID.AutoIncrement = true;
                this.columnCity_ID.AutoIncrementSeed = 1;
                this.columnCity_ID.AllowDBNull = false;
                this.columnCity_ID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow NewCityRow() {
                return ((CityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CityRowChanged != null)) {
                    this.CityRowChanged(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CityRowChanging != null)) {
                    this.CityRowChanging(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CityRowDeleted != null)) {
                    this.CityRowDeleted(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CityRowDeleting != null)) {
                    this.CityRowDeleting(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCityRow(CityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsWT ds = new dsWT();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CountryRow : System.Data.DataRow {
            
            private CountryDataTable tableCountry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CountryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCountry = ((CountryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Country_ID {
                get {
                    return ((short)(this[this.tableCountry.Country_IDColumn]));
                }
                set {
                    this[this.tableCountry.Country_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Continent_ID {
                get {
                    try {
                        return ((short)(this[this.tableCountry.Continent_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Continent_ID\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.Continent_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCountry.NameColumn]));
                }
                set {
                    this[this.tableCountry.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone_Code {
                get {
                    try {
                        return ((string)(this[this.tableCountry.Phone_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Phone_Code\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.Phone_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentRow ContinentRow {
                get {
                    return ((ContinentRow)(this.GetParentRow(this.Table.ParentRelations["FK_Continent_Country_Continent_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Continent_Country_Continent_ID"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContinent_IDNull() {
                return this.IsNull(this.tableCountry.Continent_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContinent_IDNull() {
                this[this.tableCountry.Continent_IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone_CodeNull() {
                return this.IsNull(this.tableCountry.Phone_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone_CodeNull() {
                this[this.tableCountry.Phone_CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow[] GetStateRows() {
                return ((StateRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Country_State_Country_ID"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StateRow : System.Data.DataRow {
            
            private StateDataTable tableState;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableState = ((StateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short State_ID {
                get {
                    return ((short)(this[this.tableState.State_IDColumn]));
                }
                set {
                    this[this.tableState.State_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Country_ID {
                get {
                    try {
                        return ((short)(this[this.tableState.Country_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Country_ID\' in table \'State\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableState.Country_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableState.NameColumn]));
                }
                set {
                    this[this.tableState.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow CountryRow {
                get {
                    return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["FK_Country_State_Country_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Country_State_Country_ID"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountry_IDNull() {
                return this.IsNull(this.tableState.Country_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountry_IDNull() {
                this[this.tableState.Country_IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow[] GetCityRows() {
                return ((CityRow[])(base.GetChildRows(this.Table.ChildRelations["FK_State_City_State_ID"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContinentRow : System.Data.DataRow {
            
            private ContinentDataTable tableContinent;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContinentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContinent = ((ContinentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Continent_ID {
                get {
                    return ((short)(this[this.tableContinent.Continent_IDColumn]));
                }
                set {
                    this[this.tableContinent.Continent_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableContinent.NameColumn]));
                }
                set {
                    this[this.tableContinent.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow[] GetCountryRows() {
                return ((CountryRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Continent_Country_Continent_ID"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TimezoneRow : System.Data.DataRow {
            
            private TimezoneDataTable tableTimezone;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimezoneRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimezone = ((TimezoneDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Timezone_ID {
                get {
                    return ((short)(this[this.tableTimezone.Timezone_IDColumn]));
                }
                set {
                    this[this.tableTimezone.Timezone_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTimezone.NameColumn]));
                }
                set {
                    this[this.tableTimezone.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Offset {
                get {
                    return ((string)(this[this.tableTimezone.OffsetColumn]));
                }
                set {
                    this[this.tableTimezone.OffsetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasDST {
                get {
                    return ((bool)(this[this.tableTimezone.HasDSTColumn]));
                }
                set {
                    this[this.tableTimezone.HasDSTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DST_Start {
                get {
                    return ((string)(this[this.tableTimezone.DST_StartColumn]));
                }
                set {
                    this[this.tableTimezone.DST_StartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DST_End {
                get {
                    return ((string)(this[this.tableTimezone.DST_EndColumn]));
                }
                set {
                    this[this.tableTimezone.DST_EndColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow[] GetCityRows() {
                return ((CityRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Timezone_City_Timezone_ID"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CityRow : System.Data.DataRow {
            
            private CityDataTable tableCity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCity = ((CityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short City_ID {
                get {
                    return ((short)(this[this.tableCity.City_IDColumn]));
                }
                set {
                    this[this.tableCity.City_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short State_ID {
                get {
                    try {
                        return ((short)(this[this.tableCity.State_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'State_ID\' in table \'City\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.State_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Timezone_ID {
                get {
                    try {
                        return ((short)(this[this.tableCity.Timezone_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Timezone_ID\' in table \'City\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.Timezone_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCity.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'City\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Country_Capital {
                get {
                    try {
                        return ((bool)(this[this.tableCity.Is_Country_CapitalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Is_Country_Capital\' in table \'City\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.Is_Country_CapitalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone_Code {
                get {
                    try {
                        return ((string)(this[this.tableCity.Phone_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Phone_Code\' in table \'City\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.Phone_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Weather_Code {
                get {
                    try {
                        return ((string)(this[this.tableCity.Weather_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Weather_Code\' in table \'City\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.Weather_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimezoneRow TimezoneRow {
                get {
                    return ((TimezoneRow)(this.GetParentRow(this.Table.ParentRelations["FK_Timezone_City_Timezone_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Timezone_City_Timezone_ID"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow StateRow {
                get {
                    return ((StateRow)(this.GetParentRow(this.Table.ParentRelations["FK_State_City_State_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_State_City_State_ID"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsState_IDNull() {
                return this.IsNull(this.tableCity.State_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetState_IDNull() {
                this[this.tableCity.State_IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimezone_IDNull() {
                return this.IsNull(this.tableCity.Timezone_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimezone_IDNull() {
                this[this.tableCity.Timezone_IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableCity.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableCity.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Country_CapitalNull() {
                return this.IsNull(this.tableCity.Is_Country_CapitalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Country_CapitalNull() {
                this[this.tableCity.Is_Country_CapitalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone_CodeNull() {
                return this.IsNull(this.tableCity.Phone_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone_CodeNull() {
                this[this.tableCity.Phone_CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeather_CodeNull() {
                return this.IsNull(this.tableCity.Weather_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeather_CodeNull() {
                this[this.tableCity.Weather_CodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CountryRowChangeEvent : System.EventArgs {
            
            private CountryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRowChangeEvent(CountryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StateRowChangeEvent : System.EventArgs {
            
            private StateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRowChangeEvent(StateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContinentRowChangeEvent : System.EventArgs {
            
            private ContinentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentRowChangeEvent(ContinentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TimezoneRowChangeEvent : System.EventArgs {
            
            private TimezoneRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimezoneRowChangeEvent(TimezoneRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimezoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CityRowChangeEvent : System.EventArgs {
            
            private CityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRowChangeEvent(CityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591